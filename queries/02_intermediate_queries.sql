-- =====================
-- Intermediate Queries (10 Tasks)
-- =====================

-- 1. Total students enrolled in each course
SELECT 
    c.title AS course_title,
    COUNT(e.id) AS total_enrollments
FROM course c
JOIN enrollment e ON c.id = e.course_id
GROUP BY c.id, c.title
ORDER BY total_enrollments DESC;

-- 2. Average course rating per instructor
SELECT 
    u.name AS instructor_name,
    ROUND(AVG(r.rating),0) AS avg_rating
FROM instructor i
JOIN users u ON i.user_id = u.id
JOIN course c ON i.id = c.instructor_id
JOIN review r ON r.course_id = c.id
GROUP BY u.name
ORDER BY avg_rating DESC;

-- 3. Number of assignments per course with more than 2 assignments
SELECT 
    c.title AS course_title,
    COUNT(a.id) AS total_assignments
FROM course c
JOIN assignment a ON c.id = a.course_id
GROUP BY c.title
HAVING COUNT(a.id) > 2
ORDER BY total_assignments DESC;

-- 4. Students who enrolled in more than 1 course
SELECT 
    u.name AS student_name,
    COUNT(e.course_id) AS total_courses
FROM student s
JOIN users u ON s.user_id = u.id
JOIN enrollment e ON s.id = e.student_id
GROUP BY u.name
HAVING COUNT(e.course_id) > 1
ORDER BY total_courses DESC;

-- 5. Revenue generated by each course
SELECT 
    c.title AS course_title,
    SUM(p.amount) AS total_revenue
FROM course c
JOIN payment p ON c.id = p.course_id
GROUP BY c.title
ORDER BY total_revenue DESC;

-- 6. Top 3 most-reviewed courses
SELECT 
    c.title AS course_title,
    COUNT(r.id) AS review_count
FROM course c
JOIN review r ON c.id = r.course_id
GROUP BY c.title
ORDER BY review_count DESC
LIMIT 3;

-- 7. Count of submissions per student (across all assignments)
SELECT 
    u.name AS student_name,
    COUNT(sbm.id) AS total_submissions
FROM submission sbm
JOIN student s ON sbm.student_id = s.id
JOIN users u ON s.user_id = u.id
GROUP BY u.name
ORDER BY total_submissions DESC;

-- 8. Courses with average rating > 4 and more than 3 reviews
SELECT 
    c.title AS course_title,
    ROUND(AVG(r.rating), 2) AS avg_rating,
    COUNT(r.id) AS review_count
FROM course c
JOIN review r ON c.id = r.course_id
GROUP BY c.title
HAVING AVG(r.rating) > 4 AND COUNT(r.id) > 3
ORDER BY avg_rating DESC;

-- 9. Certificates issued in the last 30 days
SELECT 
    cert.id,
    cert.certificate_url,
    cert.issued_date,
    u.name AS student_name,
    c.title AS course_title
FROM certificate cert
JOIN enrollment e ON cert.enrollment_id = e.id
JOIN student s ON e.student_id = s.id
JOIN users u ON s.user_id = u.id
JOIN course c ON e.course_id = c.id
WHERE cert.issued_date >= CURRENT_DATE - INTERVAL '30 days'
ORDER BY cert.issued_date DESC;

-- 10. Total revenue per instructor (via their courses)
SELECT 
    u.name AS instructor_name,
    SUM(p.amount) AS total_revenue
FROM instructor i
JOIN users u ON i.user_id = u.id
JOIN course c ON c.instructor_id = i.id
JOIN payment p ON p.course_id = c.id
GROUP BY u.name
ORDER BY total_revenue DESC;
